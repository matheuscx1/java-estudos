package academy.devdojo.maratonajava.Dconstrutores.dominio;

public class Anime {
    private String nome;
    private String tipo;
    private int episodios;
    private String genero;
    private String estudio;



    // ‚öôÔ∏è CONSTRUTOR
    // O construtor √© chamado automaticamente quando voc√™ cria um objeto com `new Anime(...)`
    // Ele tem o mesmo nome da classe e n√£o tem tipo de retorno

    // üß± CONSTRUTOR 1: com 4 par√¢metros (nome, tipo, epis√≥dios, g√™nero)
    // Esse construtor √© chamado quando criamos o objeto com 4 argumentos
    public Anime(String nome, String tipo, int episodios, String genero) {
        this(); // Isso imprime "dentro do construtor sem argumentos"

        // üõ†Ô∏è Depois que o construtor vazio termina, continuamos aqui
        // Atribu√≠mos os valores recebidos nos atributos do objeto
        this.nome = nome;
        this.tipo = tipo;
        this.episodios = episodios;
        this.genero = genero;

        // Agora esse construtor termina e volta para quem chamou (talvez o construtor com 5 argumentos)

    }

    //sobrecarga de metodos no construtor

    // üß± CONSTRUTOR 2: com 5 par√¢metros (nome, tipo, epis√≥dios, g√™nero, estudio)
    public Anime(String nome, String tipo, int episodios, String genero, String estudio) {
        // üëâ Primeiro, chamamos o outro construtor acima com 4 argumentos
        // Isso vai automaticamente executar o `this()` tamb√©m, ent√£o a ordem ser√°:
        // 1. this() ‚Üí imprime "dentro do construtor sem argumentos"
        // 2. Atribui nome, tipo, epis√≥dios, g√™nero
        this(nome, tipo, episodios, genero); //java vai achar o construtor baseado no tipo

        // üõ†Ô∏è Depois que o outro construtor termina, aqui atribuimos o estudio
        this.estudio = estudio;

        // ‚úÖ Agora o objeto est√° completamente pronto

    }


    // üß± CONSTRUTOR 3: sem argumentos (chamado internamente pelos outros)
    public Anime() {
        System.out.println("dentro do construtor sem argumentos ");
    }

    public void imprime(){
        System.out.println("Nome: " + nome);
        System.out.println("Tipo: " + tipo);
        System.out.println(this.episodios);
        System.out.println(this.genero);
        System.out.println(this.estudio);
    }
    public void setNome(String nome) {
        this.nome = nome;
    }
    public String getNome() {
        return nome;
    }

    public String getGenero() {
        return genero;
    }

    public void setGenero(String genero) {
        this.genero = genero;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public String getTipo() {
        return tipo;
    }

    public void setEpisodios(int episodios) {
        this.episodios = episodios;
    }

    public int getEpisodios() {
        return episodios;
    }

    // üó∫Ô∏è MAPA DA CLASSE:
//
// ‚úÖ Objetivo:
// - Criar objetos `Anime` j√° com todos os atributos definidos assim que s√£o instanciados.
// - Imprimir esses atributos com `imprime()`
//
// ‚úÖ POO aplicada:
// - Encapsulamento: atributos privados, acessados via getters/setters
// - Construtor: m√©todo especial executado automaticamente ao criar o objeto
// - Inst√¢ncia: tudo funciona com base em um objeto `anime` espec√≠fico
//
// ‚úÖ Exemplo pr√°tico:
// - Quando voc√™ cria um anime com `new Anime(...)`, ele j√° nasce com nome, tipo, epis√≥dios e g√™nero.
// - Ideal quando esses valores s√£o obrigat√≥rios desde o come√ßo.
}
