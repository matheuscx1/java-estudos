package academy.devdojo.maratonajava.BIntroducaometodosPOO.test;

import academy.devdojo.maratonajava.BIntroducaometodosPOO.dominio.Pessoa;

public class PessoaTest01 {
    public static void main(String[] args) {
        // Criamos uma inst√¢ncia da classe Pessoa, chamada "pessoa"
        // Essa inst√¢ncia tem seus pr√≥prios atributos nome e idade


        Pessoa pessoa = new Pessoa();
        pessoa.setNome("Luffy");
        // Usamos o setter para atribuir o nome

        // Usamos o setter para definir a idade (com valida√ß√£o dentro da classe)
        pessoa.setIdade(18);

        // Usamos os getters para recuperar os valores
        // Esses dados v√™m dos atributos privados, acessados de forma segura        System.out.println(pessoa.getNome());
        System.out.println(pessoa.getIdade());





    }
}

// üó∫Ô∏è MAPA COMPLETO - PESSOATEST01.JAVA
// ------------------------------------
// ‚úÖ O que acontece aqui:
// - Instanciamos (criamos) um objeto da classe Pessoa.
// - Usamos os m√©todos setNome e setIdade para atribuir dados ao objeto.
// - Depois usamos os m√©todos getNome e getIdade para recuperar e exibir esses dados.

// ‚úÖ Conceitos aplicados:
// - Inst√¢ncia de classe (objeto pessoa).
// - Chamada de m√©todos p√∫blicos (set/get).
// - Boa pr√°tica: n√£o acessamos os atributos diretamente, mas sim atrav√©s de m√©todos.
// - Comunica√ß√£o entre classes: a classe PessoaTest01 acessa a l√≥gica contida na classe Pessoa, usando seus m√©todos p√∫blicos.

// ‚úÖ Resumo pr√°tico:
// - Isso √© uma simula√ß√£o real de encapsulamento de dados.
// - Ideal quando queremos proteger as informa√ß√µes de um objeto e manipular s√≥ de forma controlada.
// - Esse tipo de estrutura √© usada em sistemas reais (bancos, cadastros, etc.).
