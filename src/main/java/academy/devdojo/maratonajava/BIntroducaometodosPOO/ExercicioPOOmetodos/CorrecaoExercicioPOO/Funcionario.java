package academy.devdojo.maratonajava.BIntroducaometodosPOO.ExercicioPOOmetodos.CorrecaoExercicioPOO;

// üì¶ CLASSE Funcionario
// üëâ Esta classe representa o modelo (dom√≠nio) de um funcion√°rio
// üëâ Em POO, ela √© uma classe que agrupa dados (nome, idade, sal√°rios) e comportamentos (m√©todos imprimir e mediaSalario)
// üëâ Ou seja: ela encapsula tanto estado (os dados) quanto comportamento (os m√©todos que agem nesses dados)

public class Funcionario {
    // üîë ATRIBUTOS (ou campos, ou vari√°veis de inst√¢ncia)
    // S√£o as caracter√≠sticas do objeto (inst√¢ncia de Funcionario) quando ele for criado
    public String nome;
    public int idade;
    public double[] salarios;

    // ‚öôÔ∏è M√âTODO imprimir()
    // Este m√©todo imprime os dados b√°sicos do funcion√°rio no console
    // Al√©m disso, ele chama internamente outro m√©todo (mediaSalario) ao final
    public void imprimir() {
        // üëâ this.nome e this.idade referem-se ao nome e idade do OBJETO ATUAL
        // Exemplo: se voc√™ criou Funcionario funcionario = new Funcionario();
        // ent√£o aqui, this.nome = funcionario.nome, this.idade = funcionario.idade

        System.out.println(this.nome);
        System.out.println(this.idade);

        // ‚ö†Ô∏è CHECAGEM DE NULIDADE
        // Se o array salarios for null (n√£o inicializado), interrompe aqui (return) e n√£o tenta percorrer, evitando NullPointerException
        if (salarios == null) {
            return;                   // nao precisa abrir e fechar as chaves no if se tiver apenas 1 liha de execucao, mas as 3 linhas contam como uma, mas isso √© feio ent√£o coloque os aprenteses, pra simplficar ainda mais e melhorar vc pode colocar assim:
        }

        // üåÄ FOR-ENHANCED (for-each) LOOP
        // Percorre cada elemento do array salarios
        // Para cada salario ‚Üí imprime no console, seguido por um espa√ßo
        for (double salario : this.salarios) {
            System.out.print(salario + " ");
        }
        // ‚úÖ CHAMADA DO M√âTODO mediaSalario()
        // Colocado aqui para n√£o precisar chamar l√° no FuncionarioTest01
        mediaSalario();
    }


    // ‚öôÔ∏è M√âTODO mediaSalario()
    // Calcula e imprime a m√©dia salarial do funcion√°rio

    public void mediaSalario() {
        // ‚ö†Ô∏è CHECAGEM DE NULIDADE (de novo)
        // Mesmo que j√° tenha sido checado no imprimir(), fazemos outra checagem aqui
        // Por qu√™?
        // Porque este m√©todo √© PUBLICO ‚Üí pode ser chamado isoladamente de fora
        // Exemplo: funcionario.mediaSalario(); (sem passar pelo imprimir())
        if (salarios == null) {
            return;
        }

        // üßÆ CALCULAR A M√âDIA
        double media = 0;

        // Soma todos os sal√°rios
        for (double salario : this.salarios) {
            media += salario;
        }

        // Divide pelo n√∫mero de sal√°rios (comprimento do array)
        media /= this.salarios.length;

        // üì¢ Imprime o resultado
        System.out.println("\nM√©dia salarial: " + media);

    }
}

// üó∫Ô∏è MAPA COMPLETO DO FLUXO
// ‚úÖ Quem cria quem:
// - A classe FuncionarioTest01 cria o objeto Funcionario.
// - Esse objeto armazena os dados e os m√©todos.
//
// ‚úÖ Quem chama quem:
// - FuncionarioTest01.main() ‚Üí chama funcionario.imprimir() ‚Üí que chama mediaSalario().
//
// ‚úÖ Como os dados fluem:
// - Os dados do array salarios s√£o usados tanto no la√ßo for (para imprimir) quanto no c√°lculo da m√©dia.
// - O m√©todo imprimir() √© o ponto central, porque al√©m de exibir, ele tamb√©m dispara o c√°lculo da m√©dia.
//
// ‚úÖ POO envolvido:
// - Inst√¢ncia ‚Üí o objeto Funcionario criado no main.
// - Encapsulamento ‚Üí aqui n√£o est√° bem aplicado, porque os atributos est√£o public; o ideal seria usar private + getters/setters.
// - M√©todo ‚Üí fun√ß√µes da classe, como imprimir() e mediaSalario().
// - Array ‚Üí estrutura de dados para armazenar m√∫ltiplos sal√°rios.
// - Responsabilidade ‚Üí Funcionario cuida de seus pr√≥prios dados e c√°lculos; FuncionarioTest01 apenas cria e dispara a√ß√µes.
//
// ‚úÖ Analogia pr√°tica:
// Pense no Funcionario como uma ficha de cadastro que sabe mostrar seus dados e fazer contas sobre si mesma.
// O FuncionarioTest01 √© como algu√©m testando essa ficha, preenchendo os campos e pedindo para a ficha se apresentar.

