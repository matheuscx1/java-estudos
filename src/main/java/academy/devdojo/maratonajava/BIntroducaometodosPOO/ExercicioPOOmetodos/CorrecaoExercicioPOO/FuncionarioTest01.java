package academy.devdojo.maratonajava.BIntroducaometodosPOO.ExercicioPOOmetodos.CorrecaoExercicioPOO;


// üì¶ CLASSE FuncionarioTest01
// üëâ Classe de teste ‚Üí serve apenas para rodar e verificar se a l√≥gica do Funcionario funciona corretamente
// Em POO, muitas vezes chamamos isso de classe de "test" ou "driver"

public class FuncionarioTest01 {
    public static void main(String[] args) {
        // üõ†Ô∏è CRIA√á√ÉO DA INST√ÇNCIA
        // Aqui criamos um objeto real do tipo Funcionario, chamado "funcionario"
    Funcionario funcionario = new Funcionario();

        // üè∑Ô∏è ATRIBUI√á√ÉO DE VALORES
        // Preenchendo os atributos com dados fict√≠cios (simulando um caso real)
    funcionario.setNome("sanji");
    funcionario.setIdade(23);
    funcionario.setSalarios(new double[]{1500, 987.65, 3000});
        System.out.println(funcionario.getMedia());

        // ‚öôÔ∏è CHAMADA DO M√âTODO imprimir()
        // Isso vai rodar o m√©todo imprimir do Funcionario, que:
        // 1Ô∏è‚É£ imprime nome e idade
        // 2Ô∏è‚É£ imprime cada sal√°rio
        // 3Ô∏è‚É£ calcula e imprime a m√©dia salarial
    funcionario.imprimir();
    }
}

// üó∫Ô∏è MAPA COMPLETO DO FLUXO (documenta√ß√£o geral no final)
// --------------------------------------------
// ‚úÖ O que cada classe faz:
// - Funcionario ‚Üí guarda os dados (nome, idade, sal√°rios) e tem m√©todos para imprimir e calcular m√©dia.
// - FuncionarioTest01 ‚Üí cria um objeto Funcionario, preenche os dados e aciona o processo.

// ‚úÖ Quem instancia quem:
// - Aqui no main() ‚Üí instanciamos (criamos) um objeto funcionario.
// - Chamamos funcionario.imprimir() ‚Üí isso usa os m√©todos definidos dentro da classe Funcionario.

// ‚úÖ O que acontece no m√©todo imprimir():
// - Imprime os atributos nome e idade.
// - Percorre o array salarios e imprime cada valor.
// - Chama internamente o m√©todo mediaSalario() ‚Üí calcula e imprime a m√©dia salarial.

// ‚úÖ Conceitos de POO aqui:
// - Classe ‚Üí molde para criar objetos (Funcionario).
// - Objeto (inst√¢ncia) ‚Üí funcionario criado no main.
// - M√©todo ‚Üí fun√ß√µes dentro da classe (imprimir, mediaSalario).
// - Encapsulamento (parcial) ‚Üí estamos acessando atributos diretamente, mas boas pr√°ticas sugerem usar private + getters/setters.
// - Arrays ‚Üí estrutura para armazenar m√∫ltiplos sal√°rios.

// ‚úÖ Analogia pr√°tica:
// Pense que voc√™ est√° preenchendo uma ficha de funcion√°rio no sistema (FuncionarioTest01).
// Quando voc√™ manda imprimir(), a ficha automaticamente l√™ seus pr√≥prios dados e ainda calcula a m√©dia dos sal√°rios para exibir.
// Voc√™ n√£o precisa fazer isso manualmente no testador; a pr√≥pria classe sabe como lidar com seus dados (princ√≠pio b√°sico de encapsulamento e responsabilidade).

// ‚úÖ Melhorias poss√≠veis:
// - Tornar os atributos privados para garantir encapsulamento real.
// - Usar getters/setters para acessar/modificar dados.
// - Fazer verifica√ß√µes mais robustas (ex: se o array de sal√°rios estiver vazio ou nulo).
